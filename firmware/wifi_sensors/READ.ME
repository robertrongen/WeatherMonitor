# ESP8266 Firmware for Sky Monitoring Sensors

This firmware is designed for an ESP8266-based system to monitor sky conditions using:
- **MLX90614** IR temperature sensor for sky and ambient temperature readings.
- **TSL2591** high dynamic range digital light sensor for sky quality measurements.

The system collects sensor data, outputs it as JSON strings over the serial port, and provides dynamic debug capabilities for easy troubleshooting.

---

## **Features**

### **Normal Operation**
1. **Data Collection**:
   - Sky and ambient temperatures are read using the MLX90614 sensor.
   - Sky quality metrics (IR, full spectrum, visible light, and lux) are read using the TSL2591 sensor.
2. **JSON Output**:
   - Sensor data is serialized into a JSON object and sent over the serial port every 30 seconds.
   - Example JSON:
     ```json
     {"sky_temperature":"25.50","ambient_temperature":"22.30","sqm_ir":300,"sqm_full":500,"sqm_visible":200,"sqm_lux":100.50}
     ```
3. **Status Feedback**:
   - The onboard LED indicates sensor status:
     - **Steady Blink**: Both sensors are working.
     - **Rapid Blink**: One or both sensors are unavailable.

### **Debug Mode**
1. **Toggle Debugging**:
   - Enable or disable detailed debug messages via serial commands:
     - `DEBUG ON` to enable debug mode.
     - `DEBUG OFF` to disable debug mode.
2. **Debug Outputs**:
   - Sensor initialization and data read status.
   - I2C device scanning for troubleshooting connectivity issues.
3. **Minimal Serial Output**:
   - When debug mode is off, only JSON data is sent to the serial port.

---

## **Usage Instructions**

### **Setup**
1. Connect the MLX90614 and TSL2591 sensors to the ESP8266 board via I2C.
2. Upload the firmware using the Arduino IDE.
3. Open a serial monitor or connect the board to a Raspberry Pi to monitor the serial port output.

### **Normal Operation**
1. The system outputs JSON-formatted sensor data every 30 seconds.
2. Use a script or application to parse and utilize the JSON data.
3. Monitor the onboard LED for real-time sensor status feedback.

### **Enable Debugging**
1. Open a terminal on the Raspberry Pi connected to the board.
2. Send the following command to toggle debug mode:
   ```bash
   echo "DEBUG ON" > /dev/ttyUSB0
   ```
3. To disable debug mode:
   ```bash
   echo "DEBUG OFF" > /dev/ttyUSB0
   ```
4. Debug messages include sensor initialization status, data read errors, and I2C scan results.

---

## **Debugging Tips**

### **Common Issues**
1. **No JSON Data**:
   - Check if the sensors are properly connected to the I2C bus.
   - Run `scanDevices()` (enabled in debug mode) to ensure the sensors are detected.
2. **Temperature or Light Values Missing**:
   - Verify sensor status in debug mode.
   - Ensure the sensors are initialized successfully during startup.

### **Example Debug Output**
```plaintext
MLX90614 IR temp sensor initialized.
Sky Temperature: 25.50
Ambient Temperature: 22.30
TSL2591 sky quality sensor initialized.
{"sky_temperature":"25.50","ambient_temperature":"22.30","sqm_ir":300,"sqm_full":500,"sqm_visible":200,"sqm_lux":100.50}
```

---

## **Advanced Debugging**
1. **Modify Debug Mode**:
   - To enable continuous I2C scans, modify the `scanDevices` call in `setup()`.
2. **Custom Commands**:
   - Add additional serial commands for advanced functionality (e.g., resetting sensors).
3. **Serial Monitoring on Raspberry Pi**:
   - Use the following command to monitor serial data:
     ```bash
     cat /dev/ttyUSB0
     ```

---

## **JSON Output Format**
- **`sky_temperature`**: Sky temperature in degrees Celsius.
- **`ambient_temperature`**: Ambient temperature in degrees Celsius.
- **`sqm_ir`**: IR light level (integer).
- **`sqm_full`**: Full-spectrum light level (integer).
- **`sqm_visible`**: Visible light level (integer).
- **`sqm_lux`**: Light intensity in lux (float).
- If a sensor is unavailable, the corresponding fields will display `"N/A"`.

---

## **License**
This firmware is open-source and available for modification and redistribution. Refer to the LICENSE file for details.

